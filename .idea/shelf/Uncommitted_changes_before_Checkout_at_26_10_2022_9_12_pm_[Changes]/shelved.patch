Index: src/thrones/game/GameOfThrones.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package thrones.game;\r\n\r\n// Oh_Heaven.java\r\n\r\nimport ch.aplu.jcardgame.*;\r\nimport ch.aplu.jgamegrid.*;\r\n\r\nimport java.awt.Color;\r\nimport java.awt.Font;\r\nimport java.io.FileReader;\r\nimport java.util.*;\r\nimport java.util.stream.Collectors;\r\n\r\n@SuppressWarnings(\"serial\")\r\npublic class GameOfThrones extends CardGame {\r\n\r\n    enum GoTSuit { CHARACTER, DEFENCE, ATTACK, MAGIC }\r\n\r\n    public enum Suit {\r\n        SPADES(GoTSuit.DEFENCE),\r\n        HEARTS(GoTSuit.CHARACTER),\r\n        DIAMONDS(GoTSuit.MAGIC),\r\n        CLUBS(GoTSuit.ATTACK);\r\n\r\n        Suit(GoTSuit gotsuit) {\r\n            this.gotsuit = gotsuit;\r\n        }\r\n        private final GoTSuit gotsuit;\r\n\r\n        public boolean isDefence(){ return gotsuit == GoTSuit.DEFENCE; }\r\n\r\n        public boolean isAttack(){ return gotsuit == GoTSuit.ATTACK; }\r\n\r\n        public boolean isCharacter(){ return gotsuit == GoTSuit.CHARACTER; }\r\n\r\n        public boolean isMagic(){ return gotsuit == GoTSuit.MAGIC; }\r\n    }\r\n\r\n    public enum Rank {\r\n        // Reverse order of rank importance (see rankGreater() below)\r\n        // Order of cards is tied to card images\r\n        ACE(1),\r\n        KING(10),\r\n        QUEEN(10),\r\n        JACK(10),\r\n        TEN(10),\r\n        NINE(9),\r\n        EIGHT(8),\r\n        SEVEN(7),\r\n        SIX(6),\r\n        FIVE(5),\r\n        FOUR(4),\r\n        THREE(3),\r\n        TWO(2);\r\n        Rank(int rankValue) {\r\n            this.rankValue = rankValue;\r\n        }\r\n        private final int rankValue;\r\n        public int getRankValue() {\r\n            return rankValue;\r\n        }\r\n    }\r\n\r\n    /*\r\n    Canonical String representations of Suit, Rank, Card, and Hand\r\n    */\r\n    String canonical(Suit s) { return s.toString().substring(0, 1); }\r\n\r\n    String canonical(Rank r) {\r\n        switch (r) {\r\n            case ACE: case KING: case QUEEN: case JACK: case TEN:\r\n                return r.toString().substring(0, 1);\r\n            default:\r\n                return String.valueOf(r.getRankValue());\r\n        }\r\n    }\r\n\r\n    String canonical(Card c) { return canonical((Rank) c.getRank()) + canonical((Suit) c.getSuit()); }\r\n\r\n    String canonical(Hand h) {\r\n        return \"[\" + h.getCardList().stream().map(this::canonical).collect(Collectors.joining(\",\")) + \"]\";\r\n    }\r\n    static public int seed;\r\n    static Random random;\r\n\r\n    // return random Card from Hand\r\n    public static Card randomCard(Hand hand) {\r\n        assert !hand.isEmpty() : \" random card from empty hand.\";\r\n        int x = random.nextInt(hand.getNumberOfCards());\r\n        return hand.get(x);\r\n    }\r\n\r\n    private void dealingOut(Hand[] hands, int nbPlayers, int nbCardsPerPlayer) {\r\n        Hand pack = deck.toHand(false);\r\n        assert pack.getNumberOfCards() == 52 : \" Starting pack is not 52 cards.\";\r\n        // Remove 4 Aces\r\n        List<Card> aceCards = pack.getCardsWithRank(Rank.ACE);\r\n        for (Card card : aceCards) {\r\n            card.removeFromHand(false);\r\n        }\r\n        assert pack.getNumberOfCards() == 48 : \" Pack without aces is not 48 cards.\";\r\n        // Give each player 3 heart cards\r\n        for (int i = 0; i < nbPlayers; i++) {\r\n            for (int j = 0; j < 3; j++) {\r\n                List<Card> heartCards = pack.getCardsWithSuit(Suit.HEARTS);\r\n                int x = random.nextInt(heartCards.size());\r\n                Card randomCard = heartCards.get(x);\r\n                randomCard.removeFromHand(false);\r\n                hands[i].insert(randomCard, false);\r\n            }\r\n        }\r\n        assert pack.getNumberOfCards() == 36 : \" Pack without aces and hearts is not 36 cards.\";\r\n        // Give each player 9 of the remaining cards\r\n        for (int i = 0; i < nbCardsPerPlayer; i++) {\r\n            for (int j = 0; j < nbPlayers; j++) {\r\n                assert !pack.isEmpty() : \" Pack has prematurely run out of cards.\";\r\n                Card dealt = randomCard(pack);\r\n                dealt.removeFromHand(false);\r\n                hands[j].insert(dealt, false);\r\n            }\r\n        }\r\n        for (int j = 0; j < nbPlayers; j++) {\r\n            assert hands[j].getNumberOfCards() == 12 : \" Hand does not have twelve cards.\";\r\n        }\r\n    }\r\n\r\n    private final String version = \"1.0\";\r\n    public final int nbPlayers = 4;\r\n    public final int nbStartCards = 9;\r\n\tpublic final int nbPlays = 6;\r\n\tpublic final int nbRounds = 3;\r\n    private final int handWidth = 400;\r\n    private final int pileWidth = 40;\r\n    private Deck deck = new Deck(Suit.values(), Rank.values(), \"cover\");\r\n    private final Location[] handLocations = {\r\n            new Location(350, 625),\r\n            new Location(75, 350),\r\n            new Location(350, 75),\r\n            new Location(625, 350)\r\n    };\r\n\r\n    private final Location[] scoreLocations = {\r\n            new Location(575, 675),\r\n            new Location(25, 575),\r\n            new Location(25, 25),\r\n            new Location(575, 125)\r\n    };\r\n    private final Location[] pileLocations = {\r\n            new Location(350, 280),\r\n            new Location(350, 430)\r\n    };\r\n    private final Location[] pileStatusLocations = {\r\n            new Location(250, 200),\r\n            new Location(250, 520)\r\n    };\r\n\r\n    private Actor[] pileTextActors = { null, null };\r\n    private Actor[] scoreActors = {null, null, null, null};\r\n    private final int watchingTime = 5000;\r\n    private Hand[] hands;\r\n    private Hand[] piles;\r\n    private final String[] playerTeams = { \"[Players 0 & 2]\", \"[Players 1 & 3]\"};\r\n    private int nextStartingPlayer = random.nextInt(nbPlayers);\r\n\r\n    private int[] scores = new int[nbPlayers];\r\n\r\n    Font bigFont = new Font(\"Arial\", Font.BOLD, 36);\r\n    Font smallFont = new Font(\"Arial\", Font.PLAIN, 10);\r\n\r\n    // boolean[] humanPlayers = { true, false, false, false};\r\n    boolean[] humanPlayers = { false, false, false, false};\r\n\r\n\r\n    private void initScore() {\r\n        for (int i = 0; i < nbPlayers; i++) {\r\n             scores[i] = 0;\r\n            String text = \"P\" + i + \"-0\";\r\n            scoreActors[i] = new TextActor(text, Color.WHITE, bgColor, bigFont);\r\n            addActor(scoreActors[i], scoreLocations[i]);\r\n        }\r\n\r\n        String text = \"Attack: 0 - Defence: 0\";\r\n        for (int i = 0; i < pileTextActors.length; i++) {\r\n            pileTextActors[i] = new TextActor(text, Color.WHITE, bgColor, smallFont);\r\n            addActor(pileTextActors[i], pileStatusLocations[i]);\r\n        }\r\n    }\r\n\r\n    private void updateScore(int player) {\r\n        removeActor(scoreActors[player]);\r\n        String text = \"P\" + player + \"-\" + scores[player];\r\n        scoreActors[player] = new TextActor(text, Color.WHITE, bgColor, bigFont);\r\n        addActor(scoreActors[player], scoreLocations[player]);\r\n    }\r\n\r\n    private void updateScores() {\r\n        for (int i = 0; i < nbPlayers; i++) {\r\n            updateScore(i);\r\n        }\r\n        System.out.println(playerTeams[0] + \" score = \" + scores[0] + \"; \" + playerTeams[1] + \" score = \" + scores[1]);\r\n    }\r\n\r\n    private Optional<Card> selected;\r\n    private final int NON_SELECTION_VALUE = -1;\r\n    private int selectedPileIndex = NON_SELECTION_VALUE;\r\n    private final int UNDEFINED_INDEX = -1;\r\n    private final int ATTACK_RANK_INDEX = 0;\r\n    private final int DEFENCE_RANK_INDEX = 1;\r\n    private void setupGame() {\r\n        hands = new Hand[nbPlayers];\r\n        for (int i = 0; i < nbPlayers; i++) {\r\n            hands[i] = new Hand(deck);\r\n        }\r\n        dealingOut(hands, nbPlayers, nbStartCards);\r\n\r\n        for (int i = 0; i < nbPlayers; i++) {\r\n            hands[i].sort(Hand.SortType.SUITPRIORITY, true);\r\n            System.out.println(\"hands[\" + i + \"]: \" + canonical(hands[i]));\r\n        }\r\n\r\n        for (final Hand currentHand : hands) {\r\n            // Set up human player for interaction\r\n            currentHand.addCardListener(new CardAdapter() {\r\n                public void leftDoubleClicked(Card card) {\r\n                    selected = Optional.of(card);\r\n                    currentHand.setTouchEnabled(false);\r\n                }\r\n                public void rightClicked(Card card) {\r\n                    selected = Optional.empty(); // Don't care which card we right-clicked for player to pass\r\n                    currentHand.setTouchEnabled(false);\r\n                }\r\n            });\r\n        }\r\n        // graphics\r\n        RowLayout[] layouts = new RowLayout[nbPlayers];\r\n        for (int i = 0; i < nbPlayers; i++) {\r\n            layouts[i] = new RowLayout(handLocations[i], handWidth);\r\n            layouts[i].setRotationAngle(90 * i);\r\n            hands[i].setView(this, layouts[i]);\r\n            hands[i].draw();\r\n        }\r\n        // End graphics\r\n    }\r\n\r\n    private void resetPile() {\r\n        if (piles != null) {\r\n            for (Hand pile : piles) {\r\n                pile.removeAll(true);\r\n            }\r\n        }\r\n        piles = new Hand[2];\r\n        for (int i = 0; i < 2; i++) {\r\n            piles[i] = new Hand(deck);\r\n            piles[i].setView(this, new RowLayout(pileLocations[i], 8 * pileWidth));\r\n            piles[i].draw();\r\n            final Hand currentPile = piles[i];\r\n            final int pileIndex = i;\r\n            piles[i].addCardListener(new CardAdapter() {\r\n                public void leftClicked(Card card) {\r\n                    selectedPileIndex = pileIndex;\r\n                    currentPile.setTouchEnabled(false);\r\n                }\r\n            });\r\n        }\r\n\r\n        updatePileRanks();\r\n    }\r\n\r\n    private void pickACorrectSuit(int playerIndex, boolean isCharacter) {\r\n        Hand currentHand = hands[playerIndex];\r\n        List<Card> shortListCards = new ArrayList<>();\r\n        for (int i = 0; i < currentHand.getCardList().size(); i++) {\r\n            Card card = currentHand.getCardList().get(i);\r\n            Suit suit = (Suit) card.getSuit();\r\n            if (suit.isCharacter() == isCharacter) {\r\n                shortListCards.add(card);\r\n            }\r\n        }\r\n        if (shortListCards.isEmpty() || !isCharacter && random.nextInt(3) == 0) {\r\n            selected = Optional.empty();\r\n        } else {\r\n            selected = Optional.of(shortListCards.get(random.nextInt(shortListCards.size())));\r\n        }\r\n    }\r\n\r\n    private void selectRandomPile() {\r\n        selectedPileIndex = random.nextInt(2);\r\n    }\r\n\r\n    private void waitForCorrectSuit(int playerIndex, boolean isCharacter) {\r\n        if (hands[playerIndex].isEmpty()) {\r\n            selected = Optional.empty();\r\n        } else {\r\n            selected = null;\r\n            hands[playerIndex].setTouchEnabled(true);\r\n            do {\r\n                if (selected == null) {\r\n                    delay(100);\r\n                    continue;\r\n                }\r\n                Suit suit = selected.isPresent() ? (Suit) selected.get().getSuit() : null;\r\n                if (isCharacter && suit != null && suit.isCharacter() ||         // If we want character, can't pass and suit must be right\r\n                        !isCharacter && (suit == null || !suit.isCharacter())) { // If we don't want character, can pass or suit must not be character\r\n                    // if (suit != null && suit.isCharacter() == isCharacter) {\r\n                    break;\r\n                } else {\r\n                    selected = null;\r\n                    hands[playerIndex].setTouchEnabled(true);\r\n                }\r\n                delay(100);\r\n            } while (true);\r\n        }\r\n    }\r\n\r\n    private void waitForPileSelection() {\r\n        selectedPileIndex = NON_SELECTION_VALUE;\r\n        for (Hand pile : piles) {\r\n            pile.setTouchEnabled(true);\r\n        }\r\n        while(selectedPileIndex == NON_SELECTION_VALUE) {\r\n            delay(100);\r\n        }\r\n        for (Hand pile : piles) {\r\n            pile.setTouchEnabled(false);\r\n        }\r\n    }\r\n\r\n    private int[] calculatePileRanks(int pileIndex) {\r\n        Hand currentPile = piles[pileIndex];\r\n        int i = currentPile.isEmpty() ? 0 : ((Rank) currentPile.get(0).getRank()).getRankValue();\r\n        return new int[] { i, i };\r\n    }\r\n\r\n    private void updatePileRankState(int pileIndex, int attackRank, int defenceRank) {\r\n        TextActor currentPile = (TextActor) pileTextActors[pileIndex];\r\n        removeActor(currentPile);\r\n        String text = playerTeams[pileIndex] + \" Attack: \" + attackRank + \" - Defence: \" + defenceRank;\r\n        pileTextActors[pileIndex] = new TextActor(text, Color.WHITE, bgColor, smallFont);\r\n        addActor(pileTextActors[pileIndex], pileStatusLocations[pileIndex]);\r\n    }\r\n\r\n    private void updatePileRanks() {\r\n        for (int j = 0; j < piles.length; j++) {\r\n            int[] ranks = calculatePileRanks(j);\r\n            updatePileRankState(j, ranks[ATTACK_RANK_INDEX], ranks[DEFENCE_RANK_INDEX]);\r\n        }\r\n    }\r\n\r\n    private int getPlayerIndex(int index) {\r\n        return index % nbPlayers;\r\n    }\r\n\r\n    private void executeAPlay() {\r\n        resetPile();\r\n\r\n        nextStartingPlayer = getPlayerIndex(nextStartingPlayer);\r\n        if (hands[nextStartingPlayer].getNumberOfCardsWithSuit(Suit.HEARTS) == 0)\r\n            nextStartingPlayer = getPlayerIndex(nextStartingPlayer + 1);\r\n        assert hands[nextStartingPlayer].getNumberOfCardsWithSuit(Suit.HEARTS) != 0 : \" Starting player has no hearts.\";\r\n\r\n        // 1: play the first 2 hearts\r\n        for (int i = 0; i < 2; i++) {\r\n            int playerIndex = getPlayerIndex(nextStartingPlayer + i);\r\n            setStatusText(\"Player \" + playerIndex + \" select a Heart card to play\");\r\n            if (humanPlayers[playerIndex]) {\r\n                waitForCorrectSuit(playerIndex, true);\r\n            } else {\r\n                pickACorrectSuit(playerIndex, true);\r\n            }\r\n\r\n            int pileIndex = playerIndex % 2;\r\n            assert selected.isPresent() : \" Pass returned on selection of character.\";\r\n            System.out.println(\"Player \" + playerIndex + \" plays \" + canonical(selected.get()) + \" on pile \" + pileIndex);\r\n            selected.get().setVerso(false);\r\n            selected.get().transfer(piles[pileIndex], true); // transfer to pile (includes graphic effect)\r\n            updatePileRanks();\r\n        }\r\n\r\n        // 2: play the remaining nbPlayers * nbRounds - 2\r\n        int remainingTurns = nbPlayers * nbRounds - 2;\r\n        int nextPlayer = nextStartingPlayer + 2;\r\n\r\n        while(remainingTurns > 0) {\r\n            nextPlayer = getPlayerIndex(nextPlayer);\r\n            setStatusText(\"Player\" + nextPlayer + \" select a non-Heart card to play.\");\r\n            if (humanPlayers[nextPlayer]) {\r\n                waitForCorrectSuit(nextPlayer, false);\r\n            } else {\r\n                pickACorrectSuit(nextPlayer, false);\r\n            }\r\n\r\n            if (selected.isPresent()) {\r\n                setStatusText(\"Selected: \" + canonical(selected.get()) + \". Player\" + nextPlayer + \" select a pile to play the card.\");\r\n                if (humanPlayers[nextPlayer]) {\r\n                    waitForPileSelection();\r\n                } else {\r\n                    selectRandomPile();\r\n                }\r\n                System.out.println(\"Player \" + nextPlayer + \" plays \" + canonical(selected.get()) + \" on pile \" + selectedPileIndex);\r\n                selected.get().setVerso(false);\r\n                selected.get().transfer(piles[selectedPileIndex], true); // transfer to pile (includes graphic effect)\r\n                updatePileRanks();\r\n            } else {\r\n                setStatusText(\"Pass.\");\r\n            }\r\n            nextPlayer++;\r\n            remainingTurns--;\r\n        }\r\n\r\n        // 3: calculate winning & update scores for players\r\n        updatePileRanks();\r\n        int[] pile0Ranks = calculatePileRanks(0);\r\n        int[] pile1Ranks = calculatePileRanks(1);\r\n        System.out.println(\"piles[0]: \" + canonical(piles[0]));\r\n        System.out.println(\"piles[0] is \" + \"Attack: \" + pile0Ranks[ATTACK_RANK_INDEX] + \" - Defence: \" + pile0Ranks[DEFENCE_RANK_INDEX]);\r\n        System.out.println(\"piles[1]: \" + canonical(piles[1]));\r\n        System.out.println(\"piles[1] is \" + \"Attack: \" + pile1Ranks[ATTACK_RANK_INDEX] + \" - Defence: \" + pile1Ranks[DEFENCE_RANK_INDEX]);\r\n        Rank pile0CharacterRank = (Rank) piles[0].getCardList().get(0).getRank();\r\n        Rank pile1CharacterRank = (Rank) piles[1].getCardList().get(0).getRank();\r\n        String character0Result;\r\n        String character1Result;\r\n\r\n        if (pile0Ranks[ATTACK_RANK_INDEX] > pile1Ranks[DEFENCE_RANK_INDEX]) {\r\n            scores[0] += pile1CharacterRank.getRankValue();\r\n            scores[2] += pile1CharacterRank.getRankValue();\r\n            character0Result = \"Character 0 attack on character 1 succeeded.\";\r\n        } else {\r\n            scores[1] += pile1CharacterRank.getRankValue();\r\n            scores[3] += pile1CharacterRank.getRankValue();\r\n            character0Result = \"Character 0 attack on character 1 failed.\";\r\n        }\r\n\r\n        if (pile1Ranks[ATTACK_RANK_INDEX] > pile0Ranks[DEFENCE_RANK_INDEX]) {\r\n            scores[1] += pile0CharacterRank.getRankValue();\r\n            scores[3] += pile0CharacterRank.getRankValue();\r\n            character1Result = \"Character 1 attack on character 0 succeeded.\";\r\n        } else {\r\n            scores[0] += pile0CharacterRank.getRankValue();\r\n            scores[2] += pile0CharacterRank.getRankValue();\r\n            character1Result = \"Character 1 attack character 0 failed.\";\r\n        }\r\n        updateScores();\r\n        System.out.println(character0Result);\r\n        System.out.println(character1Result);\r\n        setStatusText(character0Result + \" \" + character1Result);\r\n\r\n        // 5: discarded all cards on the piles\r\n        nextStartingPlayer += 1;\r\n        delay(watchingTime);\r\n    }\r\n\r\n    public GameOfThrones() {\r\n        super(700, 700, 30);\r\n\r\n        setTitle(\"Game of Thrones (V\" + version + \") Constructed for UofM SWEN30006 with JGameGrid (www.aplu.ch)\");\r\n        setStatusText(\"Initializing...\");\r\n        initScore();\r\n\r\n        setupGame();\r\n        for (int i = 0; i < nbPlays; i++) {\r\n            executeAPlay();\r\n            updateScores();\r\n        }\r\n\r\n        String text;\r\n        if (scores[0] > scores[1]) {\r\n            text = \"Players 0 and 2 won.\";\r\n        } else if (scores[0] == scores[1]) {\r\n            text = \"All players drew.\";\r\n        } else {\r\n            text = \"Players 1 and 3 won.\";\r\n        }\r\n        System.out.println(\"Result: \" + text);\r\n        setStatusText(text);\r\n\r\n        refresh();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        // System.out.println(\"Working Directory = \" + System.getProperty(\"user.dir\"));\r\n        // final Properties properties = new Properties();\r\n        // properties.setProperty(\"watchingTime\", \"5000\");\r\n        /*\r\n        if (args == null || args.length == 0) {\r\n            //  properties = PropertiesLoader.loadPropertiesFile(\"cribbage.properties\");\r\n        } else {\r\n            //  properties = PropertiesLoader.loadPropertiesFile(args[0]);\r\n        }\r\n\r\n        String seedProp = properties.getProperty(\"seed\");  //Seed property\r\n        if (seedProp != null) { // Use property seed\r\n\t\t\t  seed = Integer.parseInt(seedProp);\r\n        } else { // and no property\r\n\t\t\t  seed = new Random().nextInt(); // so randomise\r\n        }\r\n        */\r\n        GameOfThrones.seed = 130008;\r\n        System.out.println(\"Seed = \" + seed);\r\n        GameOfThrones.random = new Random(seed);\r\n        new GameOfThrones();\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/thrones/game/GameOfThrones.java b/src/thrones/game/GameOfThrones.java
--- a/src/thrones/game/GameOfThrones.java	(revision 67cb38ec63429c2b1267fd370a60532e1b250a94)
+++ b/src/thrones/game/GameOfThrones.java	(date 1666778525015)
@@ -14,6 +14,18 @@
 @SuppressWarnings("serial")
 public class GameOfThrones extends CardGame {
 
+    static public int seed;
+    static Random random;
+    private final String version = "1.0";
+    public final int nbPlayers = 4;
+    public final int nbStartCards = 9;
+    public final int nbPlays = 6;
+    public final int nbRounds = 3;
+    private final int handWidth = 400;
+    private final int pileWidth = 40;
+    private Deck deck = new Deck(Suit.values(), Rank.values(), "cover");
+    private final BattleHandler battleHandler = new BattleHandler(this);
+
     enum GoTSuit { CHARACTER, DEFENCE, ATTACK, MAGIC }
 
     public enum Suit {
@@ -80,16 +92,21 @@
     String canonical(Hand h) {
         return "[" + h.getCardList().stream().map(this::canonical).collect(Collectors.joining(",")) + "]";
     }
-    static public int seed;
-    static Random random;
+
 
-    // return random Card from Hand
+
+
+    // Draws a random card from the Hand, based on a random number generator
     public static Card randomCard(Hand hand) {
         assert !hand.isEmpty() : " random card from empty hand.";
         int x = random.nextInt(hand.getNumberOfCards());
         return hand.get(x);
     }
 
+    /*
+     Deals out the entire pack of 52 cards without shuffling, removing aces,
+     and ensuring each player gets 3 heart cards and 9 non-hearts
+     */
     private void dealingOut(Hand[] hands, int nbPlayers, int nbCardsPerPlayer) {
         Hand pack = deck.toHand(false);
         assert pack.getNumberOfCards() == 52 : " Starting pack is not 52 cards.";
@@ -124,14 +141,7 @@
         }
     }
 
-    private final String version = "1.0";
-    public final int nbPlayers = 4;
-    public final int nbStartCards = 9;
-	public final int nbPlays = 6;
-	public final int nbRounds = 3;
-    private final int handWidth = 400;
-    private final int pileWidth = 40;
-    private Deck deck = new Deck(Suit.values(), Rank.values(), "cover");
+
     private final Location[] handLocations = {
             new Location(350, 625),
             new Location(75, 350),
@@ -193,7 +203,7 @@
         addActor(scoreActors[player], scoreLocations[player]);
     }
 
-    private void updateScores() {
+    void updateScores() {
         for (int i = 0; i < nbPlayers; i++) {
             updateScore(i);
         }
@@ -242,29 +252,7 @@
         // End graphics
     }
 
-    private void resetPile() {
-        if (piles != null) {
-            for (Hand pile : piles) {
-                pile.removeAll(true);
-            }
-        }
-        piles = new Hand[2];
-        for (int i = 0; i < 2; i++) {
-            piles[i] = new Hand(deck);
-            piles[i].setView(this, new RowLayout(pileLocations[i], 8 * pileWidth));
-            piles[i].draw();
-            final Hand currentPile = piles[i];
-            final int pileIndex = i;
-            piles[i].addCardListener(new CardAdapter() {
-                public void leftClicked(Card card) {
-                    selectedPileIndex = pileIndex;
-                    currentPile.setTouchEnabled(false);
-                }
-            });
-        }
 
-        updatePileRanks();
-    }
 
     private void pickACorrectSuit(int playerIndex, boolean isCharacter) {
         Hand currentHand = hands[playerIndex];
@@ -350,6 +338,30 @@
         return index % nbPlayers;
     }
 
+    private void resetPile() {
+        if (piles != null) {
+            for (Hand pile : piles) {
+                pile.removeAll(true);
+            }
+        }
+        piles = new Hand[2];
+        for (int i = 0; i < 2; i++) {
+            piles[i] = new Hand(deck);
+            piles[i].setView(this, new RowLayout(pileLocations[i], 8 * pileWidth));
+            piles[i].draw();
+            final Hand currentPile = piles[i];
+            final int pileIndex = i;
+            piles[i].addCardListener(new CardAdapter() {
+                public void leftClicked(Card card) {
+                    selectedPileIndex = pileIndex;
+                    currentPile.setTouchEnabled(false);
+                }
+            });
+        }
+
+        updatePileRanks();
+    }
+
     private void executeAPlay() {
         resetPile();
 
@@ -411,6 +423,9 @@
         updatePileRanks();
         int[] pile0Ranks = calculatePileRanks(0);
         int[] pile1Ranks = calculatePileRanks(1);
+        battleHandler.battle(pile0Ranks, pile1Ranks, scores, piles);
+
+        /*
         System.out.println("piles[0]: " + canonical(piles[0]));
         System.out.println("piles[0] is " + "Attack: " + pile0Ranks[ATTACK_RANK_INDEX] + " - Defence: " + pile0Ranks[DEFENCE_RANK_INDEX]);
         System.out.println("piles[1]: " + canonical(piles[1]));
@@ -443,7 +458,7 @@
         System.out.println(character0Result);
         System.out.println(character1Result);
         setStatusText(character0Result + " " + character1Result);
-
+        */
         // 5: discarded all cards on the piles
         nextStartingPlayer += 1;
         delay(watchingTime);
Index: src/thrones/game/PropertiesLoader.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/thrones/game/PropertiesLoader.java b/src/thrones/game/PropertiesLoader.java
new file mode 100644
--- /dev/null	(date 1666771640641)
+++ b/src/thrones/game/PropertiesLoader.java	(date 1666771640641)
@@ -0,0 +1,5 @@
+package thrones.game;
+
+public class PropertiesLoader {
+
+}
Index: src/thrones/game/PileHandler.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/thrones/game/PileHandler.java b/src/thrones/game/PileHandler.java
new file mode 100644
--- /dev/null	(date 1666779088370)
+++ b/src/thrones/game/PileHandler.java	(date 1666779088370)
@@ -0,0 +1,79 @@
+package thrones.game;
+
+import ch.aplu.jcardgame.Card;
+import ch.aplu.jcardgame.CardAdapter;
+import ch.aplu.jcardgame.Hand;
+import ch.aplu.jcardgame.RowLayout;
+import ch.aplu.jgamegrid.Actor;
+import ch.aplu.jgamegrid.TextActor;
+
+import java.awt.*;
+
+/**
+ * (Pure Fabrication) Responsible for updating the ranks of each pile in the game
+ */
+
+/*
+
+public class PileHandler {
+    //toAdd:
+    private Hand[] piles;
+    private final int ATTACK_RANK_INDEX = 0;
+    private final int DEFENCE_RANK_INDEX = 1;
+    private Actor[] pileTextActors = { null, null };
+
+
+    private void updatePileRanks() {
+        for (int j = 0; j < piles.length; j++) {
+            int[] ranks = calculatePileRanks(j);
+            updatePileRankState(j, ranks[ATTACK_RANK_INDEX], ranks[DEFENCE_RANK_INDEX]);
+        }
+    }
+
+    private int[] calculatePileRanks(int pileIndex) {
+        Hand currentPile = piles[pileIndex];
+        int i = currentPile.isEmpty() ? 0 : ((GameOfThrones.Rank) currentPile.get(0).getRank()).getRankValue();
+        return new int[] { i, i };
+    }
+
+    private void updatePileRankState(int pileIndex, int attackRank, int defenceRank) {
+        TextActor currentPile = (TextActor) pileTextActors[pileIndex];
+        removeActor(currentPile);
+        String text = playerTeams[pileIndex] + " Attack: " + attackRank + " - Defence: " + defenceRank;
+        pileTextActors[pileIndex] = new TextActor(text, Color.WHITE, bgColor, smallFont);
+        addActor(pileTextActors[pileIndex], pileStatusLocations[pileIndex]);
+    }
+
+    private void resetPile() {
+        if (piles != null) {
+            for (Hand pile : piles) {
+                pile.removeAll(true);
+            }
+        }
+        piles = new Hand[2];
+        for (int i = 0; i < 2; i++) {
+            piles[i] = new Hand(deck);
+            piles[i].setView(this, new RowLayout(pileLocations[i], 8 * pileWidth));
+            piles[i].draw();
+            final Hand currentPile = piles[i];
+            final int pileIndex = i;
+            piles[i].addCardListener(new CardAdapter() {
+                public void leftClicked(Card card) {
+                    selectedPileIndex = pileIndex;
+                    currentPile.setTouchEnabled(false);
+                }
+            });
+        }
+
+        updatePileRanks();
+    }
+    // Method that prints string representations to the console
+    public void battleStrings() {
+        java.lang.System.out.println("piles[0]: " + canonical(piles[0]));
+        System.out.println("piles[0] is " + "Attack: " + pile0Ranks[ATTACK_RANK_INDEX] +
+                " - Defence: " + pile0Ranks[DEFENCE_RANK_INDEX]);
+        System.out.println("piles[1]: " + canonical(piles[1]));
+        System.out.println("piles[1] is " + "Attack: " + pile1Ranks[ATTACK_RANK_INDEX] +
+                " - Defence: " + pile1Ranks[DEFENCE_RANK_INDEX]);
+    }
+}*/
Index: src/thrones/game/BattleHandler.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/thrones/game/BattleHandler.java b/src/thrones/game/BattleHandler.java
new file mode 100644
--- /dev/null	(date 1666778524967)
+++ b/src/thrones/game/BattleHandler.java	(date 1666778524967)
@@ -0,0 +1,65 @@
+package thrones.game;
+import ch.aplu.jcardgame.Hand;
+
+/**
+ * Simple class that handles the battling of piles and prints results to the console
+ */
+
+public class BattleHandler {
+
+    private final static int ATTACK_RANK_INDEX = 0;
+    private final static int DEFENCE_RANK_INDEX = 1;
+    private final static int CHARACTER_CARD = 0;
+    private final static int PLAYER_ZERO = 0;
+    private final static int PLAYER_ONE = 1;
+    private final GameOfThrones game;
+
+    //PileHandler pileHandler;
+
+    public BattleHandler(GameOfThrones game) {
+        this.game = game;
+        //this.pileHandler = pilehandler;
+    }
+    // Major method call, used to execute battle sequence
+    public void battle(int[] pile0Ranks, int[] pile1Ranks, int[] scores, Hand[] piles) {
+        printStartBattleInfo(pile0Ranks, pile1Ranks, piles);
+        GameOfThrones.Rank pile0CharacterRank = (GameOfThrones.Rank) piles[PLAYER_ZERO].getCardList().get(CHARACTER_CARD).getRank();
+        GameOfThrones.Rank pile1CharacterRank = (GameOfThrones.Rank) piles[PLAYER_ONE].getCardList().get(CHARACTER_CARD).getRank();
+        String character0Result;
+        String character1Result;
+
+        if (pile0Ranks[ATTACK_RANK_INDEX] > pile1Ranks[DEFENCE_RANK_INDEX]) {
+            scores[0] += pile1CharacterRank.getRankValue();
+            scores[2] += pile1CharacterRank.getRankValue();
+            character0Result = "Character 0 attack on character 1 succeeded.";
+        } else {
+            scores[1] += pile1CharacterRank.getRankValue();
+            scores[3] += pile1CharacterRank.getRankValue();
+            character0Result = "Character 0 attack on character 1 failed.";
+        }
+
+        if (pile1Ranks[ATTACK_RANK_INDEX] > pile0Ranks[DEFENCE_RANK_INDEX]) {
+            scores[1] += pile0CharacterRank.getRankValue();
+            scores[3] += pile0CharacterRank.getRankValue();
+            character1Result = "Character 1 attack on character 0 succeeded.";
+        } else {
+            scores[0] += pile0CharacterRank.getRankValue();
+            scores[2] += pile0CharacterRank.getRankValue();
+            character1Result = "Character 1 attack character 0 failed.";
+        }
+        game.updateScores();
+        System.out.println(character0Result);
+        System.out.println(character1Result);
+        game.setStatusText(character0Result + " " + character1Result);
+    }
+
+    private void printStartBattleInfo(int[] pile0Ranks, int[] pile1Ranks, Hand[] piles) {
+        System.out.println("piles[0]: " + game.canonical(piles[0]));
+        System.out.println("piles[0] is " + "Attack: " + pile0Ranks[ATTACK_RANK_INDEX] +
+                " - Defence: " + pile0Ranks[DEFENCE_RANK_INDEX]);
+        System.out.println("piles[1]: " + game.canonical(piles[1]));
+        System.out.println("piles[1] is " + "Attack: " + pile1Ranks[ATTACK_RANK_INDEX] +
+                " - Defence: " + pile1Ranks[DEFENCE_RANK_INDEX]);
+    }
+
+}
